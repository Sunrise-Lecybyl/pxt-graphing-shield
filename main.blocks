<xml xmlns="https://developers.google.com/blockly/xml"><variables></variables><block type="pxt-on-start" id=":in9=,u/~?)^mc43j|FJ" x="20" y="20"><statement name="HANDLER"><block type="typescript_statement" id="3M;{3*[Lqpdxj-)X-Zr{"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace graphing {" line1="" line2="" line3="    // note that Caml casing yields lower case" line4="    // block text with spaces" line5="    // Julia's test" line6="" line7="" line8="    function normaliseArray(xs: Array&lt;number&gt;, mini: number, maxi: number) {" line9="        let xs_mini = xs.reduce((a, b) =&gt; Math.min(a, b), 9007199254740991); //For some reason Number.MAX_SAFE_INTEGER just breaks" line10="        let xs_maxi = xs.reduce((a, b) =&gt; Math.max(a, b), -9007199254740991);" line11="        console.log(xs_mini);" line12="        let index = 0;" line13="        let new_xs: Array&lt;number&gt; = [];" line14="        while (index &lt; xs.length) {" line15="            new_xs[index] = mini + (xs[index] - xs_mini) * (maxi - mini) / (xs_maxi - xs_mini);" line16="            index = index + 1;" line17="        }" line18="        return new_xs" line19="    }" line20="" line21="    //% block" line22="    export function lineGraph(x_list: Array&lt;number&gt;, y_list: Array&lt;number&gt;) {" line23="        " line24="        let normal_x_list = normaliseArray(x_list, 5, 154);" line25="        let normal_y_list = normaliseArray(y_list, 114, 5);" line26="        console.log(normal_x_list);" line27="        screen().fill(1);" line28="        screen().drawLine(5, 5, 5, 114, 0);" line29="        screen().drawLine(5, 114, 154, 114, 0);" line30="" line31="        let index2 = 1;" line32="        let point: number[] = [normal_x_list[0], normal_y_list[0]];" line33="        let new_point: number[] = [normal_x_list[1], normal_y_list[1]];" line34="" line35="        while (index2 &lt; Math.min(x_list.length, y_list.length)) {" line36="            new_point = [normal_x_list[index2], normal_y_list[index2]];" line37="            screen().drawLine(point[0], point[1], new_point[0], new_point[1], 2);" line38="            point = [normal_x_list[index2], normal_y_list[index2]];" line39="            index2 = index2 + 1;" line40="        }" line41="        return;" line42="" line43="    }" line44="    " line45="    //% block" line46="    export function drawTurtle() {}" line47="" line48="}" numlines="49"></mutation></block></statement></block></xml>